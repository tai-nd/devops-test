# The pipeline should trigger automatically on code pushes to the main branch of the Github repository.
name: Build and test
on:
  push:
    branches:
      - main
  # Assumed that we also need to test code on pull requests
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build devops-test
        uses: docker/build-push-action@v6
        with:
          push: false
          cache-to: type=gha,mode=max
          cache-from: type=gha
          tags: devops-test:latest

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image to run test
        uses: docker/build-push-action@v6
        with:
          push: false
          cache-to: type=gha,mode=max
          cache-from: type=gha
          tags: devops-test:test-latest
          target: test
          load: true # load built image form buldx to docker

      - name: Run tests
        run: docker run --network=none --rm devops-test:test-latest poetry run pytest -s

  # Deploy: Deploy the application to the production environment
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ success() && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REGION: ${{ secrets.ECR_REGION }}
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.ECR_REGION }}.amazonaws.com
        run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.ECR_REGION }}.amazonaws.com/devops-test
          tags: type=sha,prefix=main-

      - name: Build production image and push to ECR
        uses: docker/build-push-action@v6
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Terraform init & apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PROD_IMAGE: ${{ steps.meta.outputs.tags }}
        run: |
          cd devops
          terraform init
          terraform apply --auto-approve -var webapp_image=$PROD_IMAGE -var webapp_port=3000
